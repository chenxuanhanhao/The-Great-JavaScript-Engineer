5.2.1

// 数据 => 视图
var val = 0;
document.getElementById('main').value = val;
// 视图 => 数据
document.getElementById('main').addEventListener('keydown', function(event){
  val = event.target.value;
});

// 数据 => 视图
var val = 0;
$('#main').val(val);
// 视图 => 数据
$('#main').on('keydown', function(event) {
  val = event.target.value;
});

<!-- 视图 -->
<!-- 这里的ng-click指令绑定了点击事件，事件触发后调用函数并进行脏值检测 -->
<button ng-click=”add()”/>
// 数据模型
// 内置服务$timout封装setTimeout了，1000ms后执行函数并进行脏值检测
$timeout(function() {
  $scope.num = 0
}, 1000);

$scope.$watch('num', function(newVal, oldVal) {
  console.log(newVal==oldVal);
  //...
});

<div ng-controller="ctrl">
  <!-- 利用指令创建一个脏值检测对象，用来将$scope.num的值同步到input的value值 -->
  <input type="text" ng-model="num"/>
  <!-- 利用插值表达式创建一个脏值检测对象，用来将$scope.num的值同步到div的textContent属性 -->
  <div>{{num}}</div>
  <!-- 不需要同步视图，不会创建脏值检测对象 -->
  <button ng-click="num=num+1" >add</button>
</div>

<!-- 绑定键盘事件，当input元素的value值发生变化时，修改数据模型$scope.num的值 --->
<input type="number" ng-model="num"/>
<!-- 绑定点击事件，当按钮被点击时执行表达式并修改数据模型$scope.num的值 -->
<button ng-click="num=num+1">add</button>

var o = {};
function defineReactive(obj, key) {
  var value;
  Object.defineProperty(obj, key, { 
    get: function() {
      console.log('被读取了:' + value);
      return value
    }, 
    set: function(val) {
      console.log('被赋值成:' + val);
      value = val
    }
  });
}
defineReactive(o, 'p');

var select = {
  bind: function bind() {
    // 监听函数
    this.listener = function () {
      var value = getValue(el, multiple);
      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
      // 更新数据模型的值
      self.set(value);
    };
    // 绑定change事件
    this.on('change', this.listener);
  }
}

Directive.prototype.set = function (value) {
  // 判断是否为双向数据绑定
  if (this.twoWay) {
    this._withLock(function () {
      this._watcher.set(value);
    });
  } else if ('development' !== 'production') {
    warn('Directive.set() can only be used inside twoWay' + 'directives.');
  }
};

5.3.1

// 通过实现onhashchange函数来监听路由变化
window.onhashchange = function() {
  if(location.hash==='#/user/a') {
    jump2pageUser('a');
  }
}
// 通过修改 location.hash 来触发“页面跳转”  
location.hash="/user/a";
// 通过 location.assign 函数来实现“页面跳转”
location.assign(location.href + "#/user/a")
// 通过 loation.replace 函数实现“页面跳转”，页面跳转时不保留历史痕迹
location.replace(location.href + "#/user/a")

5.3.2

function resolve(url) {
  // 解析URL并加载对应页面
  ...
}
// 路由跳转
function replace(url) {
  resolve(url);
  history.replaceState({}, '',  url);
}

function push(url) {
  resolve(url);
  history.pushState({}, '',  url);  
}
// 监听路由
window.addEventListener('popstate', function() {
  // 通过location获取URL 
  var url = location.pathname + location.search;
  resolve(url);

  5.4.1

  // 定义组件模板字符串
const html = `
<template id="my-paragraph">
  // 定义组件内部样式
  <style>
    p {
      color: white;
      background-color: #666;
      padding: 5px;
    }
  </style>
  <p><slot name="my-text">My default text</slot></p>
</template>
`;
// 组件逻辑
customElements.define('my-paragraph',
  class extends HTMLElement {
    constructor() {
      // 继承类必须调用父类构造函数
      super();
      // 按照模板字符串创建模板标签
      const template = document.crenteElement('template');
      template.innerHTML = html;
      // 创建shadow DOM树，并加入模板内容。
      this.attachShadow({mode: 'open'}).appendChild(
        template.content.cloneNode(true)
      );
    }
  }
);

<!-- 组件的使用 -->
<my-paragraph>
  <span slot="my-text">Let's have some different text!</span>
</my-paragraph>

<!-- 实际渲染结果 -->
<my-paragraph>
  <!-- 这一部分属于shadow DOM树-->
  <style>
    p {
      color: white;
      background-color: #666;
      padding: 5px;
    }
  </style>
  <!-- 填充slot内容 -->
  <p><span slot="my-text">Let's have some different text!</span></p>
</my-paragraph>