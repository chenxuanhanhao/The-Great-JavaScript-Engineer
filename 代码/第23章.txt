23.1.2

// loadbalance.js
const http = require('http');
http.createServer((req, res) => {
  // 打印进程号，通过进程号区分进程
  console.log(process.pid)
  res.end()
}).listen(80, () => console.log('Listen on 80'))

23.1.3

module.exports = {
  /**
   * Application configuration section
   * http://pm2.keymetrics.io/docs/usage/application-declaration/
   */
  apps : [

    // First application
    {
      name      : 'API',
      script    : 'app.js',
      env: {
        COMMON_VARIABLE: 'true'
      },
      env_production : {
        NODE_ENV: 'production'
      }
    },

    // Second application
    {
      name      : 'WEB',
      script    : 'web.js'
    }
  ],

  /**
   * Deployment section
   * http://pm2.keymetrics.io/docs/usage/deployment/
   */
  deploy : {
    production : {
      user : 'node',
      host : '212.83.163.1',
      ref  : 'origin/master',
      repo : 'git@github.com:repo.git',
      path : '/var/www/production',
      'post-deploy' : 'npm install && pm2 reload ecosystem.config.js --env production'
    },
    dev : {
      user : 'node',
      host : '212.83.163.1',
      ref  : 'origin/master',
      repo : 'git@github.com:repo.git',
      path : '/var/www/development',
      'post-deploy' : 'npm install && pm2 reload ecosystem.config.js --env dev',
      env  : {
        NODE_ENV: 'dev'
      }
    }
  }
};

23.2.1

const cluster = require('cluster');
const http = require('http');
// 获取CPU核数
const num = require('os').cpus().length;
// 主进程负责创建子进程
if(cluster.isMaster) {
  // 根据CPU核数创建
  for(let i=0; i<num; i++) {
    cluster.fork();
  }
} else {
// 子进程创建服务端响应请求
  http.createServer((req, res) => {
    // 响应进程号
    res.end("I'm worker " + process.pid + '\n');
    // 监听8080端口
  }).listen(8080, () => console.log('Server listen on 8080'));
}

// 根据CPU核数创建
for(let i=0; i<num; i++) {
  childProcess = cluster.fork()
  childProcess.on('success', () => http.createServer((req, res) => {
    // 响应进程号
    res.end("I'm worker " + process.pid + '\n')
    // 监听8080端口
  }).listen(8080, () => console.log('Server listen on 8080')))
}

if(cluster.isMaster) {                                       
  console.log("I'm master " + process.pid);                     
  console.log('******');                                     
  for(let i=0; i<num; i++) {                                 
    cluster.fork()eq, res) => {                              
  }.end("I'm worker " + process.pid + '\n')                  
} else {8080, () => console.log('Server listen on 8080'))    
  console.log("I'm worker " + process.pid);                  
  console.log('******');                                     
  http.createServer((req, res) => {                          
    res.end("I'm worker " + process.pid + '\n')              
  }).listen(8080, () => console.log('Server listen on 8080'))
}   

// master.js
const cluster = require('cluster');
const num = require('os').cpus().length;
cluster.setupMaster({
  exec: 'worker.js'
});
for(let i=0; i<num; i++) {
  cluster.fork();
}
// worker.js
const http = require('http');
http.createServer((req, res) => {
  res.end("I'm worker " + process.pid + '\n');
}).listen(8080, () => console.log('Server listen on 8080'));

23.2.2

// master.js
// 获取子进程实例
let worker = cluster.fork();
// 给子进程发送消息
worker.send("I'm master");
// worker.js
process.on('message', msg => {
  // todo...
})

// master.js
// 主进程接收消息
worker.on('message', msg => console.log(msg));
// worker.js
// 子进程发消息
process.send("I'm worker " + process.pid)

23.2.3

// master.js
const cluster = require('cluster');
const num = require('os').cpus().length;
// 缓存kill命令杀掉的进程
let killMap = {};
cluster.setupMaster({
  exec: 'worker.js'
})
for(let i=0; i<num; i++) {
  let worker = cluster.fork()
  console.log('Start process '+worker.process.pid);
}
// 获取终端输入
process.stdin.on('data', chunk => {
  let cmd = chunk.toString().trim().split(/\s/)
  switch(cmd.shift()) {
    case 'kill': // kill命令，手动销毁指定的子进程
      cmd.forEach(pid => {
        let worker = null;
        for(let p in cluster.workers){
          worker = cluster.workers[p]
          // 通过pid进行匹配
          if(worker.process.pid == pid){
            killMap[pid] = true;
            worker.kill();
	          break;
          } 
        }
        // 进程pid不存在
        if(!killMap[pid]) {
          console.log("Process " + pid + " doesn't exist!\n")
        }
      })
      break;
    case 'ls': // 显示当前子进程号
      let result = [];
      for(let p in cluster.workers){
        result.push(cluster.workers[p].process.pid);
      }
      console.log(result.join('\n'));
      break;
    default:
      break;
  }
});
// 监听进程退出事件
cluster.on('exit', worker => {
  // 判断子进程数量如果少于预期数量则准备启动新的子进程
  if(Object.keys(cluster.workers).length < num) {
    // 如果是通过命令行删除的子进程
    if(killMap[worker.process.pid]) {
      // 清除缓存
      delete killMap[worker.process.pid]
      // 打印日志信息
      console.log("Process %s killed successful!\n", worker.process.pid);
    } else {
    // 如果是其他情况退出的子进程则重新启动
      cluster.fork();
    }
  }
});

23.3.1

const cp = require('child_process');
cp.spawn('node', ['worker.js']);
cp.exec('node worker.js', (err, stdout, stderr) => {
  // todo...
})
cp.execFile('worker.js', (err, stdout, stderr) => {
  // todo...
})
cp.fork('worker.js');

23.3.2

// parent.js
const cp = require('child_process')                  
const num = require('os').cpus().length;
const http = require('http');
let workers = [];                                  
// 按照CPU核数创建子进程
for(let i=0;i<num;i++) {                      
  workers.push(cp.fork('child.js'));
}                       
// 创建http服务实例
const server = http.createServer();
// 主进程监听connection事件并响应
server.on('connection', socket => socket.end('parent\n'));
// 主进程监听端口
server.listen(8080, () => { 
  // 向子进程发送server句柄
  workers.forEach(child => child.send('server', server));
});
// child.js
// 接收句柄
process.on('message', (msg, handle) => {
  // 响应请求进程号
  let response = socket => {
    socket.end("I'm worker " + process.pid + '\n');
  }
  // 监听connection事件             
  handle.on('connection', response);
}); 

// parent.js
const cp = require('child_process')
const num = require('os').cpus().length;
const http = require('http');
let workers = [];
for(let i=0;i<num;i++) {
  workers.push(cp.fork('child.js'));
}
const server = http.createServer();
server.on('connection', socket => {
  // 从队列尾部中取出一个子进程
  let worker = workers.pop();
  // 发送socket句柄
  worker.send('socket', socket);
  // 将子进程移入队列首部
  workers.unshift(worker);
});
server.listen(80);
// child.js
process.on('message',(data, socket)=>{
  socket.end('worker ' + process.pid+'\n');
});
